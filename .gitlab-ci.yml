image: $IMAGE

stages:
  - version
  - build_releases
  - publish

version:
  stage: version
  script:
    - release next-version --allow-current
    - release next-version --allow-current > .next-version
    - export GSG_INITIAL_DEVELOPMENT=false
    - echo "RELEASE_SHA=$CI_COMMIT_SHA" > build_info
    - echo "RELEASE_VERSION=$(cat .next-version)" >> build_info
    - cat build_info
    - . build_info
    - echo $RELEASE_VERSION
  artifacts:
    paths:
      - build_info

build_windows:
  stage: build_releases
  before_script:
    - cat build_info
    - . build_info
    - 'echo "Release version is: $RELEASE_VERSION"'
    - export ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | cut -d "-" -f1)
    - 'echo "Assembly version is: $ASSEMBLY_VERSION"'
    - mc config host add scw-fr-par https://s3.fr-par.scw.cloud $SCW_AK $SCW_SK --api S3v4
    - "cd IonFS"
    - cat $MINISIGN > minisign.key
    - echo $MINISIGN_PASS > min_pass
    - "ls -lah"
    - "dotnet restore -s https://api.nuget.org/v3/index.json"
  script:
    - "dotnet build -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION"
    - "dotnet publish -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION -p:PublishSingleFile=true -p:PublishTrimmed=true --runtime win-x64"
    - "cp -R bin/Release/net6.0/win-x64/publish ."
    - "ls -lah publish"
    - "mv publish/IonFS.exe publish/ionfs.exe"
    - "cd publish"
    - "tar cfvj ../$CI_PROJECT_NAME-$RELEASE_VERSION-windows.tar.bz2 ./*"
    - "cd .."
    - 'minisign -s minisign.key -Sm $CI_PROJECT_NAME-$RELEASE_VERSION-windows.tar.bz2 -t "ionfs $RELEASE_VERSION" < min_pass'
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_path=scw-fr-par/ionfs/develop/; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_path=scw-fr-par/ionfs/; echo $ionfs_path; fi;"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-windows.tar.bz2 $ionfs_path"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-windows.tar.bz2.minisig $ionfs_path"
    - "mc ls $ionfs_path"
    - "rm -f minisign.key"
    - "rm -f min_pass"
  when: manual
  allow_failure: false
  only:
    - develop
    - main

build_mac:
  stage: build_releases
  before_script:
    - cat build_info
    - . build_info
    - 'echo "Release version is: $RELEASE_VERSION"'
    - export ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | cut -d "-" -f1)
    - 'echo "Assembly version is: $ASSEMBLY_VERSION"'
    - mc config host add scw-fr-par https://s3.fr-par.scw.cloud $SCW_AK $SCW_SK --api S3v4
    - "cd IonFS"
    - cat $MINISIGN > minisign.key
    - echo $MINISIGN_PASS > min_pass
    - "ls -lah"
    - "dotnet restore -s https://api.nuget.org/v3/index.json"
  script:
    - "dotnet build -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION"
    - "dotnet publish -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION -p:PublishSingleFile=true -p:PublishTrimmed=true --runtime osx-x64"
    - "cp -R bin/Release/net6.0/osx-x64/publish ."
    - "ls -lah publish"
    - "mv publish/IonFS ../ionfs-bin"
    - "cd ../"
    - "gon --log-level info .gon.hcl"
    - "rm -f ionfs-bin"
    - "unzip ionfs.zip"
    - "ls -lah"
    - "mv ionfs-bin ./IonFS/publish/ionfs"
    - "cd ./IonFS/publish"
    - "spctl -a -vv -t install ionfs"
    - "tar cfvj ../$CI_PROJECT_NAME-$RELEASE_VERSION-mac.tar.bz2 ./*"
    - "cd .."
    - 'minisign -s minisign.key -Sm ionfs-$RELEASE_VERSION-mac.tar.bz2 -t "ionfs $RELEASE_VERSION" < min_pass'
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_path=scw-fr-par/ionfs/develop/; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_path=scw-fr-par/ionfs/; echo $ionfs_path; fi;"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-mac.tar.bz2 $ionfs_path"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-mac.tar.bz2.minisig $ionfs_path"
    - "mc ls $ionfs_path"
    - "rm -f minisign.key"
    - "rm -f min_pass"
  when: manual
  allow_failure: false
  only:
    - develop
    - main
  tags:
    - mac

build_mac_arm64:
  stage: build_releases
  image: $IMAGE_NET6
  before_script:
    - cat build_info
    - . build_info
    - 'echo "Release version is: $RELEASE_VERSION"'
    - export ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | cut -d "-" -f1)
    - 'echo "Assembly version is: $ASSEMBLY_VERSION"'
    - mc config host add scw-fr-par https://s3.fr-par.scw.cloud $SCW_AK $SCW_SK --api S3v4
    - "cd IonFS"
    - cat $MINISIGN > minisign.key
    - echo $MINISIGN_PASS > min_pass
    - "ls -lah"
    - "dotnet restore -s https://api.nuget.org/v3/index.json"
  script:
    - "dotnet build -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION"
    - "dotnet publish -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION -p:PublishSingleFile=true -p:PublishTrimmed=true --runtime osx-arm64"
    - "cp -R bin/Release/net6.0/osx-arm64/publish ."
    - "ls -lah publish"
    - "mv publish/IonFS ../ionfs-bin"
    - "cd ../"
    - "gon --log-level info .gon.hcl"
    - "rm -f ionfs-bin"
    - "unzip ionfs.zip"
    - "ls -lah"
    - "mv ionfs-bin ./IonFS/publish/ionfs"
    - "cd ./IonFS/publish"
    - "spctl -a -vv -t install ionfs"
    - "tar cfvj ../$CI_PROJECT_NAME-$RELEASE_VERSION-mac-arm64.tar.bz2 ./*"
    - "cd .."
    - 'minisign -s minisign.key -Sm ionfs-$RELEASE_VERSION-mac-arm64.tar.bz2 -t "ionfs $RELEASE_VERSION" < min_pass'
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_path=scw-fr-par/ionfs/develop/; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_path=scw-fr-par/ionfs/; echo $ionfs_path; fi;"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-mac-arm64.tar.bz2 $ionfs_path"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-mac-arm64.tar.bz2.minisig $ionfs_path"
    - "mc ls $ionfs_path"
    - "rm -f minisign.key"
    - "rm -f min_pass"
  when: manual
  allow_failure: false
  only:
    - develop
  tags:
    - mac-arm64
build_linux:
  stage: build_releases
  before_script:
    - cat build_info
    - . build_info
    - 'echo "Release version is: $RELEASE_VERSION"'
    - export ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | cut -d "-" -f1)
    - 'echo "Assembly version is: $ASSEMBLY_VERSION"'
    - mc config host add scw-fr-par https://s3.fr-par.scw.cloud $SCW_AK $SCW_SK --api S3v4
    - "cd IonFS"
    - cat $MINISIGN > minisign.key
    - echo $MINISIGN_PASS > min_pass
    - "ls -lah"
    - "dotnet restore -s https://api.nuget.org/v3/index.json"
  script:
    - "dotnet build -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION"
    - "dotnet publish -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION -p:PublishSingleFile=true -p:PublishTrimmed=true --runtime linux-x64"
    - "cp -R bin/Release/net6.0/linux-x64/publish ."
    - "ls -lah publish"
    - "mv publish/IonFS publish/ionfs"
    - "cd publish"
    - "tar cfvj ../$CI_PROJECT_NAME-$RELEASE_VERSION-linux.tar.bz2 ./*"
    - "cd .."
    - 'minisign -s minisign.key -Sm ionfs-$RELEASE_VERSION-linux.tar.bz2 -t "ionfs $RELEASE_VERSION" < min_pass'
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_path=scw-fr-par/ionfs/develop/; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_path=scw-fr-par/ionfs/; echo $ionfs_path; fi;"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-linux.tar.bz2 $ionfs_path"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-linux.tar.bz2.minisig $ionfs_path"
    - "mc ls $ionfs_path"
    - "rm -f minisign.key"
    - "rm -f min_pass"
  when: manual
  allow_failure: false
  only:
    - develop
    - main

build_linux_arm64:
  stage: build_releases
  before_script:
    - cat build_info
    - . build_info
    - 'echo "Release version is: $RELEASE_VERSION"'
    - export ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | cut -d "-" -f1)
    - 'echo "Assembly version is: $ASSEMBLY_VERSION"'
    - mc config host add scw-fr-par https://s3.fr-par.scw.cloud $SCW_AK $SCW_SK --api S3v4
    - "cd IonFS"
    - cat $MINISIGN > minisign.key
    - echo $MINISIGN_PASS > min_pass
    - "ls -lah"
    - "dotnet restore -s https://api.nuget.org/v3/index.json"
  script:
    - "dotnet build -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION"
    - "dotnet publish -c Release -p:Version=$RELEASE_VERSION -p:AssemblyVersion=$ASSEMBLY_VERSION -p:PublishSingleFile=true -p:PublishTrimmed=true --runtime linux-arm64"
    - "cp -R bin/Release/net6.0/linux-arm64/publish ."
    - "ls -lah publish"
    - "mv publish/IonFS publish/ionfs"
    - "cd publish"
    - "tar cfvj ../$CI_PROJECT_NAME-$RELEASE_VERSION-linux-arm64.tar.bz2 ./*"
    - "cd .."
    - 'minisign -s minisign.key -Sm ionfs-$RELEASE_VERSION-linux-arm64.tar.bz2 -t "ionfs $RELEASE_VERSION" < min_pass'
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_path=scw-fr-par/ionfs/develop/; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_path=scw-fr-par/ionfs/; echo $ionfs_path; fi;"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-linux-arm64.tar.bz2 $ionfs_path"
    - "mc cp --attr x-amz-acl=public-read ionfs-$RELEASE_VERSION-linux-arm64.tar.bz2.minisig $ionfs_path"
    - "mc ls $ionfs_path"
    - "rm -f minisign.key"
    - "rm -f min_pass"
  when: manual
  allow_failure: false
  only:
    - develop
    - main

publish:
  stage: publish
  script:
    - cat build_info
    - . build_info
    - "if [ $CI_COMMIT_REF_NAME = develop ]; then ionfs_uri=https://ionfs.s3.fr-par.scw.cloud/develop; echo $ionfs_path; elif [ $CI_COMMIT_REF_NAME = main ]; then ionfs_uri=https://ionfs.s3.fr-par.scw.cloud; echo $ionfs_path; fi;"
    - echo "RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-linux.tar.bz2" >> build_info
    - echo "RELEASE_SIG_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-linux.tar.bz2.minisig" >> build_info
    - echo "RELEASE_DESC=\"ionfs Linux amd64 binary\"" >> build_info
    - echo "RELEASE_SIG_DESC=\"ionfs Linux amd64 binary signature\"" >> build_info
    - echo "ARM64_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-linux-arm64.tar.bz2" >> build_info
    - echo "ARM64_SIG_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-linux-arm64.tar.bz2.minisig" >> build_info
    - echo "ARM64_DESC=\"ionfs Linux arm64 binary\"" >> build_info
    - echo "ARM64_SIG_DESC=\"ionfs Linux arm64 binary signature\"" >> build_info
    - echo "MAC_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-mac.tar.bz2" >> build_info
    - echo "MAC_SIG_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-mac.tar.bz2.minisig" >> build_info
    - echo "MAC_DESC=\"ionfs Mac amd64 binary\"" >> build_info
    - echo "MAC_SIG_DESC=\"ionfs Mac amd64 binary signature\"" >> build_info
    - echo "WIN_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-windows.tar.bz2" >> build_info
    - echo "WIN_SIG_RELEASE_URL=$ionfs_uri/ionfs-$RELEASE_VERSION-windows.tar.bz2.minisig" >> build_info
    - echo "WIN_DESC=\"ionfs Windows amd64 binary\"" >> build_info
    - echo "WIN_SIG_DESC=\"ionfs Windows amd64 binary signature\"" >> build_info
    - . build_info
    - release changelog
    - release commit-and-tag CHANGELOG.md build_info
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_URL -d "$RELEASE_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $RELEASE_SIG_URL -d "$RELEASE_SIG_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $ARM64_RELEASE_URL -d "$ARM64_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $ARM64_SIG_RELEASE_URL -d "$ARM64_SIG_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $MAC_RELEASE_URL -d "$MAC_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $MAC_SIG_RELEASE_URL -d "$MAC_SIG_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $WIN_RELEASE_URL -d "$WIN_DESC"
    - release --ci-commit-tag v$RELEASE_VERSION add-download-link -n release -u $WIN_SIG_RELEASE_URL -d "$WIN_SIG_DESC"
  only:
    - develop
    - main
